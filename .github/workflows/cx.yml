name: cx

on: push

env:
  AWS_REGION: us-east-1
  API_STAGE_NAME: "v0"
  ACCESS_LOG_RETENTION_DAYS: 7
  FUNC_MEMORY_SIZE: 128
  FUNC_TIMEOUT: 5
  FUNC_LOG_RETENTION_DAYS: 7

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      CFN_TEMPLATES: "stack.yml\n.github/cd_setup.yml\n"
    steps:
      - name: clone the repo
        uses: actions/checkout@v2.3.1

      - uses: aws-actions/configure-aws-credentials@v1.4.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: validate all cloudformation templates
        run: |
          printf "${{ env.CFN_TEMPLATES }}" | while read template; do
            aws cloudformation validate-template \
              --template-body="file://$template"
          done

  deploy:
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      _stack_name: ${{ steps.configure_environment.outputs._stack_name }}
    steps:
      - name: clone the repo
        uses: actions/checkout@v2.3.1

      - name: map branch 2 test/prod
        run: |
          if [[ ${{ github.ref }} == *master ]]; then
            echo ::set-env name=_ENVIRONMENT::test
          else
            echo ::set-env name=_ENVIRONMENT::test
          fi

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: configure the environment
        id: configure_environment
        run: |
          echo "::set-env name=_STACK_NAME::chale-$_ENVIRONMENT"
          echo "::set-env name=_GET_PROFILE_HANDLER_NAME::chale-$_ENVIRONMENT-getprofilehandler"
          echo "::set-output name=_stack_name::chale-$_ENVIRONMENT"

      - name: deploy the core stack
        run: |
          aws cloudformation deploy \
            --template-file=./stack.yml \
            --stack-name=${{ env._STACK_NAME }} \
            --parameter-overrides \
              Environment=${{ env._ENVIRONMENT }} \
              ApiStageName=${{ env.API_STAGE_NAME }} \
              FunctionMemorySize=${{ env.FUNC_MEMORY_SIZE }} \
              FunctionTimeout=${{ env.FUNC_TIMEOUT}} \
              FunctionLogRetentionInDays=${{ env.FUNC_LOG_RETENTION_DAYS }} \
              AccessLogRetentionInDays=${{ env.ACCESS_LOG_RETENTION_DAYS }} \
              GetProfileHandlerName=${{ env._GET_PROFILE_HANDLER_NAME }} \
            --capabilities=CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset


  test:
    runs-on: ubuntu-latest
    needs:
      - validate
      - deploy
    steps:
      - uses: actions/checkout@v2.3.1

      - uses: aws-actions/configure-aws-credentials@v1.4.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: fetch stack outputs
        run: |
          api_base_url="$( \
            aws cloudformation describe-stacks \
              --stack-name="${{ needs.deploy.outputs._stack_name }}" \
              --query="Stacks[0].Outputs[?OutputKey=='ApiBaseURL'].OutputValue" \
              --output=text \
          )"
          echo "::set-env name=_BASE_URL::$api_base_url"
      - name: api testing
        run: |
          source ./test/api_test.sh
          test_profile_get_200
