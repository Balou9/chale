AWSTemplateFormatVersion: 2010-09-09
Description: tcj stack

Metadata:
  AWS::Cloudformation::Interface:
    Parametergroups:
      - Label:
          default: Meta
        Parameters:
          - Environment
      - Label:
          default: API
        Parameters:
          - ApiStageName
          - AccessLogRetentionInDays
          - FunctionMemorySize
          - FunctionTimeout
          - FunctionLogRetentionInDays
          - ReadProfileHandlerName
          - UpsertProfileHandlerName
          - DeleteProfileHandlerName
      - Label:
          default: Storage
        Parameters:
          - PublicBucketName
          - ProfileTableName
          - TableReadScalingMinCapacity
          - TableWriteScalingMinCapacity

Parameters:
  ApiStageName:
    Description: API stage name - integer version identifier
    AllowedPattern: "^v[0-9]+$"
    Type: String

  AccessLogRetentionInDays:
    Description: API access log retention in days
    Type: Number
    Default: 7

  Environment:
    Description: Environment name - test/prod
    AllowedPattern: "^(test|prod)$"
    Type: String

  FunctionLogRetentionInDays:
    Description: Lambda log retention in days
    Type: Number
    Default: 7

  FunctionMemorySize:
    Description: How many megabytes of ram to allocate for the lambda
    Type: Number
    Default: 128

  FunctionTimeout:
    Description: Lambda timeout in seconds
    Type: Number
    Default: 3

  ReadProfileHandlerName:
    Description: Lambda function name for the 'get profile' handler
    AllowedPattern: "^[a-z0-9]+[a-z0-9-]+[a-z0-9]+$"
    Type: String

  UpsertProfileHandlerName:
    Description: Lambda function name for the 'upsert profile' handler
    AllowedPattern: "^[a-z0-9]+[a-z0-9-]+[a-z0-9]+$"
    Type: String

  DeleteProfileHandlerName:
    Description: Lambda function name for the 'delete profile' handler
    AllowedPattern: "^[a-z0-9]+[a-z0-9-]+[a-z0-9]+$"
    Type: String

  TableReadScalingMinCapacity:
    Description: Minimum read capacity units for autoscaling the profile table
    Type: Number
    Default: 1

  TableWriteScalingMinCapacity:
    Description: Minimum write capacity units for autoscaling the profile table
    Type: Number
    Default: 1

  ProfileTableName:
    Description: Name for the profile table
    AllowedPattern: "^[a-z0-9]+[a-z0-9-]+[a-z0-9]+$"
    Type: String

  PublicBucketName:
    Description: Name of the S3 bucket hosting public content
    AllowedPattern: "^[a-z0-9]+[a-z0-9-]+[a-z0-9]+$"
    Type: String

Resources:
  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${AWS::StackName}-orghjn

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: "tcj:name"
          Value: !Ref PublicBucketName
      BucketName: !Ref PublicBucketName

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowOriginAccessIdentity
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt OriginAccessIdentity.S3CanonicalUserId
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !GetAtt Bucket.Arn
              - !Sub arn:aws:s3:::${Bucket}/*

          - Sid: AllowReadProfileHandlerGetHeadObject
            Effect: Allow
            Principal:
              AWS: !GetAtt ReadProfileHandlerExecutionRole.Arn
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${Bucket}/*

          - Sid: AllowUpsertProfileHandlerPutObject
            Effect: Allow
            Principal:
              AWS: !GetAtt UpsertProfileHandlerExecutionRole.Arn
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${Bucket}/*

          - Sid: AllowDeleteProfileHandlerDeleteObject
            Effect: Allow
            Principal:
              AWS: !GetAtt DeleteProfileHandlerExecutionRole.Arn
            Action: s3:DeleteObject
            Resource: !Sub arn:aws:s3:::${Bucket}/*

  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub ${AWS::StackName}-restapi
      Tags:
        - Key: "tcj:name"
          Value: !Sub ${AWS::StackName}-restapi

  RequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: !Sub ${AWS::StackName}-requestvalidator
      RestApiId: !Ref RestApi
      ValidateRequestBody: True
      ValidateRequestParameters: True

  ProfileCollectionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: profiles
      RestApiId: !Ref RestApi

  ProfileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ProfileCollectionResource
      PathPart: "{profileName}"
      RestApiId: !Ref RestApi

  ReadProfileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      RequestParameters:
        method.request.path.profileName: True
      RequestValidatorId: !Ref RequestValidator
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ReadProfileHandlerArn}/invocations
          - ReadProfileHandlerArn: !GetAtt ReadProfileHandler.Arn
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "404"
        - StatusCode: "500"
        - StatusCode: "502"
      ResourceId: !Ref ProfileResource
      RestApiId: !Ref RestApi

  UpsertProfileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      RequestParameters:
        method.request.header.content-type: True
        method.request.path.profileName: True
      RequestValidatorId: !Ref RequestValidator
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpsertProfileHandlerArn}/invocations
          - UpsertProfileHandlerArn: !GetAtt UpsertProfileHandler.Arn
      MethodResponses:
        - StatusCode: "204"
        - StatusCode: "400"
        - StatusCode: "413"
        - StatusCode: "415"
        - StatusCode: "500"
        - StatusCode: "502"
      ResourceId: !Ref ProfileResource
      RestApiId: !Ref RestApi

  DeleteProfileMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: DELETE
      RequestParameters:
        method.request.path.profileName: True
      RequestValidatorId: !Ref RequestValidator
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteProfileHandlerArn}/invocations
          - DeleteProfileHandlerArn: !GetAtt DeleteProfileHandler.Arn
      MethodResponses:
        - StatusCode: "204"
        - StatusCode: "500"
        - StatusCode: "502"
      ResourceId: !Ref ProfileResource
      RestApiId: !Ref RestApi

  ReadProfileHandlerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "tcj:name"
          Value: !Sub ${ReadProfileHandlerName}-executionrole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowAssumeRoleByLambda
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ReadProfileHandlerExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLogCreation
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

              - Sid: AllowS3GetObject
                Effect: Allow
                Action: s3:* # TODO: narrow down permissions
                Resource: !Sub arn:aws:s3:::{Bucket}/*

  UpsertProfileHandlerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "tcj:name"
          Value: !Sub ${UpsertProfileHandlerName}-executionrole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowAssumeRoleByLambda
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: UpsertProfileHandlerExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLogCreation
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

              - Sid: AllowS3PutObject
                Effect: Allow
                Action: s3:PutObject
                Resource: !Sub arn:aws:s3:::{Bucket}/*


  DeleteProfileHandlerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "tcj:name"
          Value: !Sub ${DeleteProfileHandlerName}-executionrole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowAssumeRoleByLambda
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DeleteProfileHandlerExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowLogCreation
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

              - Sid: AllowS3GetDeleteObject
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub arn:aws:s3:::{Bucket}/*

  ReadProfileHandler:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: "tcj:name"
          Value: !Ref ReadProfileHandlerName
      Code:
        ZipFile: // dummy
      FunctionName: !Ref ReadProfileHandlerName
      Environment:
        Variables:
          BUCKET_NAME: !Ref Bucket
      Runtime: nodejs12.x
      Handler: index.handler
      Role: !GetAtt ReadProfileHandlerExecutionRole.Arn
      MemorySize: !Ref FunctionMemorySize
      Timeout: !Ref FunctionTimeout

  UpsertProfileHandler:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: "tcj:name"
          Value: !Ref UpsertProfileHandlerName
      Code:
        ZipFile: // dummy
      FunctionName: !Ref UpsertProfileHandlerName
      Environment:
        Variables:
          BUCKET_NAME: !Ref Bucket
      Runtime: nodejs12.x
      Handler: index.handler
      Role: !GetAtt UpsertProfileHandlerExecutionRole.Arn
      MemorySize: !Ref FunctionMemorySize
      Timeout: !Ref FunctionTimeout

  DeleteProfileHandler:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: "tcj:name"
          Value: !Ref DeleteProfileHandlerName
      Code:
        ZipFile: // dummy
      FunctionName: !Ref DeleteProfileHandlerName
      Environment:
        Variables:
          BUCKET_NAME: !Ref Bucket
      Runtime: nodejs12.x
      Handler: index.handler
      Role: !GetAtt DeleteProfileHandlerExecutionRole.Arn
      MemorySize: !Ref FunctionMemorySize
      Timeout: !Ref FunctionTimeout

  ReadProfileHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ReadProfileHandlerName}
      RetentionInDays: !Ref FunctionLogRetentionInDays

  UpsertProfileHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${UpsertProfileHandlerName}
      RetentionInDays: !Ref FunctionLogRetentionInDays

  DeleteProfileHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteProfileHandlerName}
      RetentionInDays: !Ref FunctionLogRetentionInDays

  ReadProfileHandlerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - RestApi
      - ReadProfileHandler
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ReadProfileHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${ApiStageName}/GET/profiles/{profileName}

  UpsertProfileHandlerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - RestApi
      - UpsertProfileHandler
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UpsertProfileHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${ApiStageName}/PUT/profiles/{profileName}

  DeleteProfileHandlerPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - RestApi
      - DeleteProfileHandler
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DeleteProfileHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/${ApiStageName}/DELETE/profiles/{profileName}
  #
  # ProfileTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     Tags:
  #       - Key: "tcj:name"
  #         Value: !Sub ProfileTableName
  #     AttributeDefinitions:
  #       -
  #         AttributeName: "profileName"
  #         AttributeType: "S"
  #     KeySchema:
  #       -
  #         AttributeName: "profileName"
  #         KeyType: HASH
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: !Ref TableReadScalingMinCapacity
  #       WriteCapacityUnits: !Ref TableWriteScalingMinCapacity

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ReadProfileMethod
      - UpsertProfileMethod
      - DeleteProfileMethod
    Properties:
      RestApiId: !Ref RestApi

  AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-api-${ApiStageName}
      RetentionInDays: !Ref AccessLogRetentionInDays

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      Tags:
        - Key: "tcj:name"
          Value: !Sub ${AWS::StackName}-stage
      AccessLogSetting:
        DestinationArn: !GetAtt AccessLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      DeploymentId: !Ref Deployment
      MethodSettings:
        - CachingEnabled: False
          DataTraceEnabled: True
          HttpMethod: "*"
          LoggingLevel: INFO
          MetricsEnabled: True
          ResourcePath: "/*"
      RestApiId: !Ref RestApi
      StageName: !Ref ApiStageName
      TracingEnabled: False

  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      Tags:
        - Key: "tcj:name"
          Value: !Sub ${AWS::StackName}-apigateway-loggingrole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowAssumeRoleByApiGateway
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

Outputs:
  ApiBaseURL:
    Description: "API Base URL"
    Value: !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}
